// 
//   SUBROUTINE M←CONTENTS(R0)

// 400:  LODX:      MFETCH, R0←E1, .VCY, DRETURN
	MCONT=2,MS=34,TYW=1,LR0=1,MC=1,DGO=1,VCY=1,TE1Y=1
// 401:  GOTO PAGEF IF R0<0
// 
//   SUBROUTINE CONTENTS(K←K+1)←M
	MC=11,B=700
// 402:  STORX:     R0←K←K+1
	RRN=3,IHR=1,THY=1,TYW=1,LRN=3,LR0=1
// 403:  STOR1:     MAP, .VCY, R0←E1, GOTO CSTORE IF STERR
	MS=37,TYW=1,LR0=1,MC=32,VCY=1,TE1Y=1,B=701
// 404:  STORE, RETURN
// 
//   CHECK MULTIPLE WORD OPERAND
	MCONT=2,MS=42,MC=1
// 405:  DBL:       CLEARA, GOTO TI IF A
	MS=50,MC=33,B=1400
// 406:  FETCH, RETURN
// 
	MCONT=2,MS=44,MC=1
// 407:  TI1:       GOTO TI
// 
	MC=20,B=1400
// 410:  SKIP:       Z←P←P+1, RESETCM, DGOTO NX3
	RRN=1,MS=24,IHR=1,THY=1,TYW=1,LZY=1,LRN=1,MC=1,DGO=1,B=36
// 411:  R6←M←NI, Q←7B7, GOTO NX4 IF INTRPT, .TSPY←0
// 
//   THE SPECIAL CASES IN BRU ARE HANDLED HERE:
//   K[0]= NOT A AND NOT B, K[1]=A
//   NOTE HOW P IS RESTORED IF A TRAP SHOULD OCCUR
// 
	SSP=50,TCX=1,TYW=1,LMY=1,LQX=1,LRN=6,MC=41,B=31,C=-10000000
// 412:  BRUA:      Q←K, GOTO NX4 IF Y<0
	RRN=3,THY=1,LQY=1,MC=53,VCY=1,B=31
// 413:  P←S, Q LCY 1, GOTO TI IF X<0
	RRN=2,BL=12,MS=1,THY=1,TYW=1,LRN=1,MC=17,VCY=1,B=1400
// 414:  R0←P←Z, GOTO NX5
// 
	BR=14,TXW=1,LRN=1,LR0=1,MC=1,B=350
// 415:  EXUA:      DGOTO M AND Q LCY 4 MRG BASEAD, IR←XR
	MCONT=3,BL=10,SSP=6,MS=4,TCX=1,TSPY=1,TYW=1,LRN=4,MC=20,DGO=1,C=40
// 416:  R6←M, Q←37777B, GOTO POP IF M[9]
// 
// 
//   LDD, Q=SR, S=Q+1
// 
	BL=14,TCY=1,TXW=1,LQY=1,LRN=6,MC=71,B=353,C=37777
// 417:  LDD1:      MFETCH, R0←E1, Z←40B, GOTO PAGEF IF Y<0
	MS=34,TCX=1,TYW=1,LZX=1,LR0=1,MC=53,VCY=1,TE1Y=1,B=700,C=40
// 420:  RES←AR, Z←Q AND Z, DGOTO NX1
	BR=10,SSP=1,TSPY=1,TYW=1,LZX=1,LRN=5,MC=1,DGO=1,B=34
// 421:  BR←M, R0←S←S+1, GOTO LDD2 IF Z#0
	RRN=2,BL=14,SSP=2,IHR=1,THY=1,TYW=1,LRN=2,LR0=1,LSPX=1,MC=3,B=422
// 422:  LDD2:      MFETCH, R0←E1, .VCY, GOTO PAGEF IF Y<0
	MS=34,TYW=1,LR0=1,MC=53,VCY=1,TE1Y=1,B=700
// 423:  CR←M, R0←S←S+1, CALL LODX
	MCONT=1,RRN=2,BL=14,SSP=3,IHR=1,THY=1,TYW=1,LRN=2,LR0=1,LSPX=1,MC=20,B=400
// 424:  DR←M, Z←P←P+1, GOTO NX2
// 
//   XMA
	RRN=1,BL=14,SSP=4,IHR=1,THY=1,TYW=1,LZY=1,LRN=1,LSPX=1,MC=1,B=35
// 425:  XMAA:      GOTO CSTORE IF R0[2]
	MC=24,B=701
// 426:  Z←M, GOTO ROIA IF D
	BL=14,LZX=1,MC=47,B=372
// 427:  RES←AR←Z, M←K, GOTO STRFLD IF B
	RRN=3,BR=14,SSP=1,THY=1,TXW=1,LMY=1,LRN=5,LSPX=1,MC=34,B=362
// 430:  STORE, Z←P←P+1, GOTO NX2
// 
// 
//   STD, M=SR AND NOT TDFLAG, Z[18]=TDFLAG, K=Q+1
// 
	RRN=1,MS=42,IHR=1,THY=1,TYW=1,LZY=1,LRN=1,MC=1,B=35
// 431:  STD1:      IR←M, Q←20B, GOTO CSTORE IF R0<0
	BL=14,TCY=1,TXW=1,LQY=1,LRN=4,MC=11,B=701,C=20
// 432:  Q←Q AND M LCY 1, Q←IR, GOTO ROIA IF D
	RRN=4,BL=10,MS=1,THY=1,LQX=1,LQY=1,MC=47,B=372
// 433:  STORE, M←AR, DGOTO STD2 IF NZ[18]
	SSP=1,MS=42,TSPY=1,LMY=1,MC=15,DGO=1,B=437
// 434:  M←BR, CALL STORX
	MCONT=1,SSP=2,TSPY=1,LMY=1,MC=1,B=402
// 435:  M←CR, CALL STORX
	MCONT=1,SSP=3,TSPY=1,LMY=1,MC=20,B=402
// 436:  M←DR, CALL STORX
	MCONT=1,SSP=4,TSPY=1,LMY=1,MC=1,B=402
// 437:  STD2:      Z←P←P+1, SR←Q, GOTO NX2
// 
//   CYCLIC SINGLE LEFT SHIFT
	RRN=1,BL=12,SSP=11,IHR=1,THY=1,TYW=1,LZY=1,LRN=1,LSPX=1,MC=20,B=35
// 440:  CYAL1:     Z←R0, M←24
	TCX=1,THY=1,LMX=1,LZY=1,C=30
// 441:  CYAL:      R0←Z-M, Q←AR
	BR=14,BL=3,SSP=1,LOC=1,TSPY=1,TXW=1,TAX=1,LQY=1,LR0=1,VCY=1
// 442:  M←Q LCL Z, GOTO CYAL1 IF R0>=0
	BL=12,MS=11,LMX=1,MC=12,B=440
// 443:  RES←AR←M LCH Z, GOTO NX1
// 
//   CYCLIC SINGLE RIGHT SHIFT
// 
	BL=14,SSP=1,MS=12,TXW=1,LRN=5,LSPX=1,MC=20,B=34
// 444:  CYAR2:     Z←Z+M, Q←AR, GOTO CYAR1
	BR=14,BL=14,SSP=1,TSPY=1,TAX=1,LQY=1,LZX=1,MC=1,VCY=1,B=446
// 445:  CYAR:      Z←M+ NOT Q OR Z, Q←AR
	BR=15,BL=14,SSP=1,TSPY=1,TAX=1,LQY=1,LZX=1,VCY=1
// 446:  CYAR1:     Q←Q LCL Z, GOTO CYAR2 IF Z<0
	BL=12,MS=11,LQX=1,MC=4,B=444
// 447:  RES←AR←Q LCH Z, GOTO NX1
// 
//   CYCLIC DOUBLE LEFT SHIFT
// 
	BL=12,SSP=1,MS=12,TXW=1,LRN=5,LSPX=1,MC=20,B=34
// 450:  CYDL1:     Z←R0, BR←M, DGOTO CYDL3
	BL=14,SSP=2,THY=1,LZY=1,LSPX=1,MC=1,DGO=1,B=453
// 451:  M←Q, Q←24
	BL=12,TCY=1,LMX=1,LQY=1,C=30
// 452:  CYDL:      Q←24, M←AR
	SSP=1,TCX=1,TSPY=1,LMY=1,LQX=1,C=30
// 453:  CYDL3:     R0←Z-Q
	BR=14,BL=5,LOC=1,TXW=1,TAX=1,LR0=1,VCY=1
// 454:  R6←M LCL Z, Q←BR, GOTO CYDL1 IF R0>=0
	BL=14,SSP=2,MS=11,TSPY=1,TXW=1,LQY=1,LRN=6,MC=12,B=450
// 455:  M←R6, DGOTO Z MRG BASEMSK
	MCONT=3,RRN=6,BR=14,TCX=1,THY=1,LMY=1,MC=20,DGO=1,C=140
// 456:  R6←M LCH Z, M←BR, DGOTO CYDL2
	BL=14,SSP=2,MS=12,TSPY=1,TXW=1,LMY=1,LRN=6,MC=1,DGO=1,B=457
// 457:  CYDL2:     M←M LCL Z
	BL=14,MS=11,LMX=1
// 460:  M←M LCH Z, Z←R6
	RRN=6,BL=14,MS=12,THY=1,LMX=1,LZY=1
// 461:  BR←M AND NOT Q ! Q AND Z, DGOTO NX1
	BR=10,BL=4,SSP=2,LSPX=1,MC=20,DGO=1,B=34
// 462:  RES←AR←M AND Q ! NOT Q AND Z
// 
//   CYCLIC DOUBLE RIGHT SHIFT
//     SHIFT LEFT 48-COUNT.
// 
	BR=4,BL=10,SSP=1,TXW=1,LRN=5,LSPX=1
// 463:  CYDR:      M←48, DGOTO CYDL
	TCX=1,LMX=1,MC=20,DGO=1,B=452,C=60
// 464:  Z←M+NOT Q OR Z
// 
//   ARITHMETIC SINGLE LEFT SHIFT (LOGICAL IF A)
//   Z=SHIFT COUNT
	BR=15,BL=14,TAX=1,LZX=1,VCY=1
// 465:  ASAL1:     Z←24
	TCX=1,LZX=1,C=30
// 466:  ASAL:      M←AR, Q←24
	SSP=1,TCX=1,TSPY=1,LMY=1,LQX=1,C=30
// 467:  R0←Z-Q
	BR=14,BL=5,LOC=1,TXW=1,TAX=1,LR0=1,VCY=1
// 470:  M←M LCL Z, GOTO ASAL5 IF R0>=0
	BL=14,MS=11,LMX=1,MC=12,B=675
// 471:  DGOTO Z MRG BASEMSK
	MCONT=3,BR=14,TCX=1,MC=20,DGO=1,C=140
// 472:  M←M LCH Z, DGOTO ASAL2
	BL=14,MS=12,LMX=1,MC=1,DGO=1,B=473
// 473:  ASAL2:     RES←AR←M AND NOT Q, GOTO NX1 IF A
	BL=4,SSP=1,TXW=1,LRN=5,LSPX=1,MC=33,B=34
// 474:  ASAL3:     Q←Q MRG 4B7, DGOTO ASAL4
	BL=12,TCX=1,LQX=1,MC=1,DGO=1,B=673,C=-40000000
// 475:  NOT M AND Q, GOTO NX1 IF LB=0
	BL=2,MC=22,B=34
// 476:  SPILL:     M←Q←4B7, DGOTO NX1
	TCX=1,LMX=1,LQX=1,MC=1,DGO=1,B=34,C=-40000000
// 477:  M+Q, ROV
// 
//   ARITHMETIC SINGLE RIGHT SHIFT, (LOGICAL IF A)
// 
	BR=12,BL=14,MS=66,TAX=1,VCY=1
// 500:  ASAR:      M←24
	TCX=1,LMX=1,C=30
// 501:  Z←M+NOT Q OR Z, R0←M←AR
	BR=15,BL=14,SSP=1,TSPY=1,TYW=1,TAX=1,LMY=1,LZX=1,LR0=1,VCY=1
// 502:  M←M LCL Z, Q←0, GOTO ASAR1 IF Z<0
	BL=14,MS=11,LMX=1,LQY=1,MC=4,B=505
// 503:  DGOTO Z MRG BASEMSK
	MCONT=3,BR=14,TCX=1,MC=20,DGO=1,C=140
// 504:  M←M LCH Z, DGOTO ASAR1
	BL=14,MS=12,LMX=1,MC=1,DGO=1,B=505
// 505:  ASAR1:     RES←AR←M AND Q, DGOTO NX1 IF A
	BL=10,SSP=1,TXW=1,LRN=5,LSPX=1,MC=33,DGO=1,B=34
// 506:  GOTO NX1 IF R0>=0
	MC=12,B=34
// 507:  RES←AR←M OR NOT Q, GOTO NX1
// 
//   ARITHMETIC DOUBLE LEFT SHIFT, (LOGICAL IF A)
//   M=BR, Z=SHIFT COUNT
// 
	BL=15,SSP=1,TXW=1,LRN=5,LSPX=1,MC=20,B=34
// 510:  LSHDL:     Z←R0, M←0
	THY=1,LMX=1,LZY=1
// 511:  ASDL:      BR←0, Q←24
	SSP=2,TCY=1,LQY=1,LSPX=1,C=30
// 512:  ASDL1:     R0←Z-Q
	BR=14,BL=5,LOC=1,TXW=1,TAX=1,LR0=1,VCY=1
// 513:  Q←M LCL Z, GOTO ASDL3 IF R0>=0
	BL=14,MS=11,LQX=1,MC=12,B=524
// 514:  DGOTO Z MRG BASEMSK
	MCONT=3,BR=14,TCX=1,MC=1,DGO=1,C=140
// 515:  M←Q LCH Z, DGOTO ASDL2
	BL=12,MS=12,LMX=1,MC=20,DGO=1,B=516
// 516:  ASDL2:     BR←M AND NOT Q
	BL=4,SSP=2,LSPX=1
// 517:  R6←M AND Q, M←AR
	BL=10,SSP=1,TSPY=1,TXW=1,LMY=1,LRN=6
// 520:  M←M LCL Z
	BL=14,MS=11,LMX=1
// 521:  M←M LCH Z, Z←R6
	RRN=6,BL=14,MS=12,THY=1,LMX=1,LZY=1
// 522:  DGOTO ASAL3
	MC=1,DGO=1,B=474
// 523:  RES←AR←M AND NOT Q+Z, GOTO NX1 IF A
// 
//   SHIFT COUNT>24, OVERFLOW IF NOT(AR=0 OR
//     AR=-1 AND ((AR EOR BR) AND 4B7=0));
// 
	BR=14,BL=4,SSP=1,TXW=1,TAX=1,LRN=5,LSPX=1,MC=33,VCY=1,B=34
// 524:  ASDL3:     Z←AR
	SSP=1,TSPY=1,LZY=1
// 525:  AR←M, GOTO LSHDL IF A
	BL=14,SSP=1,LSPX=1,MC=33,B=510
// 526:  Q←Z←NOT Z, GOTO ASDL4 IF Z=0
	BR=3,LQX=1,LZX=1,MC=2,B=532
// 527:  GOTO ASDL4 IF Z=0
	MC=2,B=532
// 530:  ASDL5:     Z←M←4B7, DGOTO ASDL
	TCX=1,LMX=1,LZX=1,MC=1,DGO=1,B=511,C=-40000000
// 531:  Z←R0, M←Z+M, ROV
	BR=14,BL=14,MS=66,THY=1,TAX=1,LMX=1,LZY=1,VCY=1
// 532:  ASDL4:     Z←Q EOR M, DGOTO ASDL
	BL=6,LZX=1,MC=1,DGO=1,B=511
// 533:  Z←R0, M←0, GOTO ASDL5 IF Z>=0
// 
//   ARITHMETIC DOUBLE RIGHT SHIFT
//   M=BR, Z=NEGATIVE SHIFT COUNT AND 77B, Q=77B
// 
	THY=1,LMX=1,LZY=1,MC=5,B=530
// 534:  ASDR:      Z←Z OR NOT Q, Q←24, GOTO NX1 IF Z=0
	BR=15,TCY=1,LQY=1,LZX=1,MC=2,B=34,C=30
// 535:  Z←Q+Z
	BR=14,BL=12,TAX=1,LZX=1,VCY=1
// 536:  ASDR1:     M←M LCL Z, GOTO ASDR3 IF Z<=0
	BL=14,MS=11,LMX=1,MC=13,B=547
// 537:  DGOTO Z MRG BASEMSK
	MCONT=3,BR=14,TCX=1,MC=20,DGO=1,C=140
// 540:  M←M LCH Z, DGOTO ASDR2
	BL=14,MS=12,LMX=1,MC=1,DGO=1,B=541
// 541:  ASDR2:     R6←M AND Q, M←AR
	BL=10,SSP=1,TSPY=1,TXW=1,LMY=1,LRN=6
// 542:  M←M LCL Z, R0←AR
	BL=14,SSP=1,MS=11,TSPY=1,TYW=1,LMX=1,LR0=1
// 543:  M←M LCH Z, Z←R6
	RRN=6,BL=14,MS=12,THY=1,LMX=1,LZY=1
// 544:  BR←M AND NOT Q ! Z, DGOTO NX1 IF A
	BR=14,BL=4,SSP=2,LSPX=1,MC=33,DGO=1,B=34
// 545:  RES←AR←M AND Q, GOTO NX1 IF R0>=0
	BL=10,SSP=1,TXW=1,LRN=5,LSPX=1,MC=12,B=34
// 546:  RES←AR←M OR NOT Q, GOTO NX1
// 
//   SHIF COUNT>24.  EXTEND THE SIGN OF AR.
// 
	BL=15,SSP=1,TXW=1,LRN=5,LSPX=1,MC=1,B=34
// 547:  ASDR3:     R0←M←AR, Z←Q+Z, GOTO *+2 IF A
	BR=14,BL=12,SSP=1,TSPY=1,TYW=1,TAX=1,LMY=1,LZX=1,LR0=1,MC=33,VCY=1,B=551
// 550:  AR←-1, GOTO ASDR1 IF R0<0
	BL=17,SSP=1,LSPX=1,MC=11,B=536
// 551:  AR←0, GOTO ASDR1
//   MULTIPLY NEGATIVE MULTIPLIER
	SSP=1,LSPX=1,MC=20,B=536
// 552:  MUL2:      M←NOT M+1, HROV, DGOTO MUL1
	BL=3,MS=57,LOC=1,TAX=1,LMX=1,MC=1,DGO=1,VCY=1,B=557
// 553:  K←4B7, GOTO MUL6 IF OVFLW
//   MULTIPLY NEGATIVE MULTIPLICAND
	TCX=1,TXW=1,LRN=3,MC=57,B=570,C=-40000000
// 554:  MUL3:      K←NOT Z, Q←0, GOTO MUL5 IF OVFLW
	BR=3,TXW=1,LQY=1,LRN=3,MC=57,B=563
// 555:  Q←R0, DGOTO MUL4
	THY=1,LQY=1,MC=20,DGO=1,B=560
// 556:  MH1←Q, .LSPX←0
//   MULTIPLY POSITIVE MULTIPLIER
	BL=12,SSP=40
// 557:  MUL1:      Z←K, R0←NOT Q+1, HROV, GOTO MUL3 IF R0<0
	RRN=3,BL=5,MS=57,LOC=1,THY=1,TXW=1,TAX=1,LZY=1,LR0=1,MC=11,B=554
// 560:  MUL4:      MH2←M LCY 1, .LSPX←0
	BL=14,SSP=43,MS=1
// 561:  M←MHR, .TSPY←0
	SSP=44,LMY=1
// 562:  Q←MMR, .TSPY←0
	SSP=45,LQY=1
// 563:  MUL5:      IR←AR←M, K, GOTO MUL10 IF Y<0
	RRN=3,BL=14,SSP=1,THY=1,TXW=1,LRN=4,LSPX=1,MC=53,VCY=1,B=571
// 564:  MUL7:      BR←Q, M←IR
	RRN=4,BL=12,SSP=2,THY=1,LMY=1,LSPX=1
// 565:  Q←Q LCY 20
	BL=12,MS=10,LQX=1
// 566:  Q←Q LCY 3, Z←P←P+1, DGOTO NX2
	RRN=1,BL=12,MS=3,IHR=1,THY=1,TYW=1,LQX=1,LZY=1,LRN=1,MC=1,DGO=1,B=35
// 567:  RES←M OR Q
// 
	BL=16,TXW=1,LRN=5
// 570:  MUL6:      M←Q, Q←0, GOTO MUL5
	BL=12,LMX=1,LQY=1,MC=1,B=563
// 571:  MUL10:     Q←NOT Q+1, HROV
	BL=5,MS=57,LOC=1,TAX=1,LQX=1
// 572:  AR←IR←NOT M+1, ROV, GOTO MUL7 IF CARRY
	BL=3,SSP=1,MS=66,LOC=1,TXW=1,TAX=1,LRN=4,LSPX=1,MC=61,VCY=1,B=564
// 573:  AR←IR←NOT M, GOTO MUL7
// 
	BL=3,SSP=1,TXW=1,LRN=4,LSPX=1,MC=20,B=564
// 574:  DIV4:      IR←Q←NOT Q+1, GOTO DIV5
	BL=5,LOC=1,TXW=1,TAX=1,LQX=1,LRN=4,MC=1,B=602
// 575:  DIV2:      Z←Z+1, HROV, DGOTO DIV1
	BR=14,MS=57,LOC=1,TAX=1,LZX=1,MC=20,DGO=1,VCY=1,B=600
// 576:  M←NOT M, GOTO DIV3 IF CARRY
	BL=3,LMX=1,MC=61,B=577
// 577:  DIV3:      M←M+1
	BL=14,LOC=1,TAX=1,LMX=1,VCY=1
// 600:  DIV1:      IR, Q←40000026B, DGOTO DIV4 IF Y<0
	RRN=4,TCX=1,THY=1,LQX=1,MC=53,DGO=1,VCY=1,B=574,C=-37777752
// 601:  R0←NOT Q, Q←IR
	RRN=4,BL=5,THY=1,TXW=1,LQY=1,LR0=1
// 602:  DIV5:      R6←M-Q, Q←1, GOTO DIV6 IF X<0
	BR=5,BL=14,LOC=1,TCY=1,TXW=1,TAX=1,LQY=1,LRN=6,MC=17,VCY=1,B=607,C=1
// 603:  M←R6, Q←Z MRG 1, GOTO DIV7 IF A
	RRN=6,BR=14,TCX=1,THY=1,LMY=1,LQX=1,MC=33,B=617,C=1
// 604:  Z←Q LCY 1, R0←R0+1, GOTO DIV8 IF R0<0
	BL=12,MS=1,IHR=1,THY=1,TYW=1,LZX=1,LR0=1,MC=11,B=613
// 605:  M←M LCY 1, Q←1, DGOTO DIV5
	BL=14,MS=1,TCY=1,LMX=1,LQY=1,MC=20,DGO=1,B=602,C=1
// 606:  M←M AND NOT Q ! Z AND Q, Q←IR
	RRN=4,BR=10,BL=4,THY=1,LMX=1,LQY=1
// 607:  DIV6:      Q←Z AND NOT Q, CLEARA, R0←R0+1, GOTO DIV8 IF R0<0
	BR=4,MS=50,IHR=1,THY=1,TYW=1,LQX=1,LR0=1,MC=11,B=613
// 610:  M←M LCY 1
	BL=14,MS=1,LMX=1
// 611:  Z←Q LCY 1, Q←1, DGOTO DIV5
	BL=12,MS=1,TCY=1,LQY=1,LZX=1,MC=20,DGO=1,B=602,C=1
// 612:  M←M AND NOT Q ! Z AND Q, Q←IR
	RRN=4,BR=10,BL=4,THY=1,LMX=1,LQY=1
// 613:  DIV8:      AR←RES←Q, S, GOTO DIV9 IF Y<0
	RRN=2,BL=12,SSP=1,THY=1,TXW=1,LRN=5,LSPX=1,MC=53,VCY=1,B=616
// 614:  DIV10:     BR←NOT M+1, GOTO NX1 IF D
	BL=3,SSP=2,LOC=1,TAX=1,LSPX=1,MC=47,VCY=1,B=34
// 615:  BR←M, Z←P←P+1, GOTO NX2
	RRN=1,BL=14,SSP=2,IHR=1,THY=1,TYW=1,LZY=1,LRN=1,LSPX=1,MC=20,B=35
// 616:  DIV9:      AR←RES←NOT Q+1, GOTO DIV10
	BL=5,SSP=1,LOC=1,TXW=1,TAX=1,LRN=5,LSPX=1,MC=1,B=614
// 617:  DIV7:      Q←Q-1
	BR=17,BL=12,TAX=1,LQX=1,VCY=1
// 620:  M OR Q, GOTO SPILL IF LB#0, Z←S
	RRN=2,BL=16,THY=1,LZY=1,MC=23,B=476
// 621:  GOTO SPILL IF Z>=0, M←S←4B7
	TCX=1,TXW=1,LMX=1,LRN=2,MC=5,B=476,C=-40000000
// 622:  RES←AR←M, M←0, GOTO DIV10
// 
//   ISD, IR=MAPPED Q, R0=Q+1
//     Q=Z=CONTENTS(Q)
// 
	BL=14,SSP=1,TXW=1,LMY=1,LRN=5,LSPX=1,MC=1,B=614
// 623:  ISD1:      MFETCH, .VCY, R0←E1, GOTO PAGEF IF Y<0
	MS=34,TYW=1,LR0=1,MC=53,VCY=1,TE1Y=1,B=700
// 624:  R6←Z
	BR=14,TXW=1,LRN=6
// 625:  Q←NOT Q LCY 2 MRG 63777777B
	BL=5,MS=2,TCX=1,LQX=1,C=-14000001
// 626:  Q←Z+NOT Q, Z←54B6
	BR=14,BL=5,TCY=1,TAX=1,LQX=1,LZY=1,VCY=1,C=-24000000
// 627:  R0←Q-Z, Q←Z←R6
	RRN=6,BR=3,BL=12,LOC=1,THY=1,TXW=1,TAX=1,LQY=1,LZY=1,LR0=1,VCY=1
// 630:  RES←Z←M-Z, M←1B6, DGOTO ISD2 IF R0<0
	BR=3,BL=14,LOC=1,TCY=1,TXW=1,TAX=1,LMY=1,LZX=1,LRN=5,MC=11,DGO=1,VCY=1,B=635,C=1000000
// 631:  Z←Q, GOTO NX1 IF Z=0
	BL=12,LZX=1,MC=2,B=34
// 632:  R0←IR, Q←3B6, GOTO CSTORE IF STERR, .VCY
	RRN=4,TCX=1,THY=1,TYW=1,LQX=1,LR0=1,MC=32,VCY=1,B=701,C=3000000
// 633:  M←Z AND NOT Q+1, DGOTO NX2
	BR=4,LOC=1,TAX=1,LMX=1,MC=20,DGO=1,B=35
// 634:  STORE, Z←P←P+1
	RRN=1,MS=42,IHR=1,THY=1,TYW=1,LZY=1,LRN=1
// 635:  ISD2:      R0←IR, M←M+Z, GOTO CSTORE IF STERR
	RRN=4,BR=14,BL=14,THY=1,TYW=1,TAX=1,LMX=1,LR0=1,MC=32,VCY=1,B=701
// 636:  STORE, Z←P←P+1, GOTO NX2
// 
//   DSD, R0=Q+1, Z=CONTENTS(Q)
// 
	RRN=1,MS=42,IHR=1,THY=1,TYW=1,LZY=1,LRN=1,MC=1,B=35
// 637:  DSD1:      MFETCH, .VCY, R0←E1, Q←3B6, GOTO PAGEF IF Y<0
	MS=34,TCX=1,TYW=1,LQX=1,LR0=1,MC=53,VCY=1,TE1Y=1,B=700,C=3000000
// 640:  R6←Z
	BR=14,TXW=1,LRN=6
// 641:  Z←M AND Q, Q←R6
	RRN=6,BL=10,THY=1,LQY=1,LZX=1
// 642:  RES←Z←Q-M, Q←14B6, DGOTO DSD2 IF Z=0
	BR=12,BL=3,LOC=1,TCY=1,TXW=1,TAX=1,LQY=1,LZX=1,LRN=5,MC=2,DGO=1,VCY=1,B=646,C=14000000
// 643:  Z←1B6, GOTO NX1 IF Z=0
	TCX=1,LZX=1,MC=2,B=34,C=1000000
// 644:  M←M-Z, R0, GOTO CSTORE IF STERR
	BR=3,BL=14,LOC=1,THY=1,TAX=1,LMX=1,MC=32,VCY=1,B=701
// 645:  DSD3:      STORE, Z←P←P+1, GOTO NX2
	RRN=1,MS=42,IHR=1,THY=1,TYW=1,LZY=1,LRN=1,MC=20,B=35
// 646:  DSD2:      Z←M AND Q, R0, GOTO CSTORE IF STERR, .VCY
	BL=10,THY=1,LZX=1,MC=32,VCY=1,B=701
// 647:  Q←Q-Z
	BR=3,BL=12,LOC=1,TAX=1,LQX=1,VCY=1
// 650:  Q←Q LCY 20
	BL=12,MS=10,LQX=1
// 651:  Q←Q LCY 2, DGOTO DSD3
	BL=12,MS=2,LQX=1,MC=20,DGO=1,B=645
// 652:  M←M OR Q-1
// 
	BR=17,BL=16,TAX=1,LMX=1,VCY=1
// 653:  SRS1:      Z←R0
	THY=1,LZY=1
// 654:  M←M, M←Q←IR, GOTO SRS2 IF Z#0
	RRN=4,BL=14,THY=1,LMX=1,LMY=1,LQY=1,MC=3,B=656
// 655:  M←M AND NOT Q
	BL=4,LMX=1
// 656:  SRS2:      CALL LOADSR
	MCONT=1,MC=1,B=666
// 657:  NEXT:      Z←P←P+1, GOTO NX2
// 
	RRN=1,IHR=1,THY=1,TYW=1,LZY=1,LRN=1,MC=20,B=35
// 660:  TSB1:      Q←IR, DGOTO NX1
	RRN=4,THY=1,LQY=1,MC=1,DGO=1,B=34
// 661:  RES←M AND Q
// 
// 
	BL=10,TXW=1,LRN=5
// 662:  GETSR:     Q←4B7, M←Z←RES
	RRN=5,TCX=1,THY=1,LMY=1,LQX=1,LZY=1,C=-40000000
// 663:  GETS1:     M←Z←NOT M AND Q LCY 12, Q←2B7, GOTO GETS1 IF Z=0
	BL=2,MS=6,TCY=1,LMX=1,LQY=1,LZX=1,MC=2,B=663,C=20000000
// 664:  M←SR, Q←7017B, DRETURN
	MCONT=2,SSP=11,TCX=1,TSPY=1,LMY=1,LQX=1,MC=1,DGO=1,C=7017
// 665:  M←M AND NOT Q ! Z, M←E1, GSB
// 
	BR=14,BL=4,MS=27,LMX=1,LMY=1,TE1Y=1
// 666:  LOADSR:    Z←SR←M, Q←6B3
	BL=14,SSP=11,TCY=1,LQY=1,LZX=1,LSPX=1,C=6000
// 667:  M←M AND Q, Q←2B3, PSB, DRETURN
	MCONT=2,BL=10,MS=55,TCY=1,LMX=1,LQY=1,MC=20,DGO=1,C=2000
// 670:  RES←M-Q
// 
// 
	BR=5,BL=14,LOC=1,TXW=1,TAX=1,LRN=5,VCY=1
// 671:  ICP1:      RES←M EOR Q MRG 1, GOTO NX2
	BL=6,TCX=1,TXW=1,LRN=5,MC=20,B=35,C=1
// 672:  DIV11:     Z←NOT Z MRG 1, SETD, GOTO DIV2
	BR=3,MS=36,TCX=1,LZX=1,MC=1,B=575,C=1
// 673:  ASAL4:     M AND Q, M←1, GOTO NX1 IF LB=0
	BL=10,TCY=1,LMY=1,MC=22,B=34,C=1
// 674:  M, GOTO SPILL IF LB#0
	BL=14,MC=23,B=476
// 675:  ASAL5:     RES←AR←0, GOTO NX1 IF A, .VCY
	SSP=1,TXW=1,LRN=5,LSPX=1,MC=33,VCY=1,B=34
// 676:  M, GOTO SPILL IF LB#0
	BL=14,MC=23,B=476
// 677:  GOTO NX1
	MC=20,B=34
